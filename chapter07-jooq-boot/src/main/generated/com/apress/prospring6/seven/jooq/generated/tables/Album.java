/*
 * This file is generated by jOOQ.
 */
package com.apress.prospring6.seven.jooq.generated.tables;


import com.apress.prospring6.seven.jooq.generated.Keys;
import com.apress.prospring6.seven.jooq.generated.Musicdb;
import com.apress.prospring6.seven.jooq.generated.tables.records.AlbumRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Album extends TableImpl<AlbumRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>musicdb.ALBUM</code>
     */
    public static final Album ALBUM = new Album();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlbumRecord> getRecordType() {
        return AlbumRecord.class;
    }

    /**
     * The column <code>musicdb.ALBUM.ID</code>.
     */
    public final TableField<AlbumRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>musicdb.ALBUM.VERSION</code>.
     */
    public final TableField<AlbumRecord, Integer> VERSION = createField(DSL.name("VERSION"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>musicdb.ALBUM.SINGER_ID</code>.
     */
    public final TableField<AlbumRecord, Integer> SINGER_ID = createField(DSL.name("SINGER_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>musicdb.ALBUM.TITLE</code>.
     */
    public final TableField<AlbumRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>musicdb.ALBUM.RELEASE_DATE</code>.
     */
    public final TableField<AlbumRecord, LocalDate> RELEASE_DATE = createField(DSL.name("RELEASE_DATE"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    private Album(Name alias, Table<AlbumRecord> aliased) {
        this(alias, aliased, null);
    }

    private Album(Name alias, Table<AlbumRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>musicdb.ALBUM</code> table reference
     */
    public Album(String alias) {
        this(DSL.name(alias), ALBUM);
    }

    /**
     * Create an aliased <code>musicdb.ALBUM</code> table reference
     */
    public Album(Name alias) {
        this(alias, ALBUM);
    }

    /**
     * Create a <code>musicdb.ALBUM</code> table reference
     */
    public Album() {
        this(DSL.name("ALBUM"), null);
    }

    public <O extends Record> Album(Table<O> child, ForeignKey<O, AlbumRecord> key) {
        super(child, key, ALBUM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Musicdb.MUSICDB;
    }

    @Override
    public Identity<AlbumRecord, Integer> getIdentity() {
        return (Identity<AlbumRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AlbumRecord> getPrimaryKey() {
        return Keys.KEY_ALBUM_PRIMARY;
    }

    @Override
    public List<UniqueKey<AlbumRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ALBUM_SINGER_ID);
    }

    @Override
    public List<ForeignKey<AlbumRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ALBUM);
    }

    private transient Singer _singer;

    /**
     * Get the implicit join path to the <code>musicdb.SINGER</code> table.
     */
    public Singer singer() {
        if (_singer == null)
            _singer = new Singer(this, Keys.FK_ALBUM);

        return _singer;
    }

    @Override
    public Album as(String alias) {
        return new Album(DSL.name(alias), this);
    }

    @Override
    public Album as(Name alias) {
        return new Album(alias, this);
    }

    @Override
    public Album as(Table<?> alias) {
        return new Album(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Album rename(String name) {
        return new Album(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Album rename(Name name) {
        return new Album(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Album rename(Table<?> name) {
        return new Album(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, String, LocalDate> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super Integer, ? super String, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super Integer, ? super String, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
