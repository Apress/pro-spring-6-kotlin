/*
 * This file is generated by jOOQ.
 */
package com.apress.prospring6.seven.jooq.generated.tables;


import com.apress.prospring6.seven.jooq.generated.Keys;
import com.apress.prospring6.seven.jooq.generated.Musicdb;
import com.apress.prospring6.seven.jooq.generated.tables.records.SingerRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Singer extends TableImpl<SingerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>musicdb.SINGER</code>
     */
    public static final Singer SINGER = new Singer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SingerRecord> getRecordType() {
        return SingerRecord.class;
    }

    /**
     * The column <code>musicdb.SINGER.ID</code>.
     */
    public final TableField<SingerRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>musicdb.SINGER.VERSION</code>.
     */
    public final TableField<SingerRecord, Integer> VERSION = createField(DSL.name("VERSION"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>musicdb.SINGER.FIRST_NAME</code>.
     */
    public final TableField<SingerRecord, String> FIRST_NAME = createField(DSL.name("FIRST_NAME"), SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>musicdb.SINGER.LAST_NAME</code>.
     */
    public final TableField<SingerRecord, String> LAST_NAME = createField(DSL.name("LAST_NAME"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>musicdb.SINGER.BIRTH_DATE</code>.
     */
    public final TableField<SingerRecord, LocalDate> BIRTH_DATE = createField(DSL.name("BIRTH_DATE"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>musicdb.SINGER.PHOTO</code>.
     */
    public final TableField<SingerRecord, byte[]> PHOTO = createField(DSL.name("PHOTO"), SQLDataType.BLOB.defaultValue(DSL.field("NULL", SQLDataType.BLOB)), this, "");

    private Singer(Name alias, Table<SingerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Singer(Name alias, Table<SingerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>musicdb.SINGER</code> table reference
     */
    public Singer(String alias) {
        this(DSL.name(alias), SINGER);
    }

    /**
     * Create an aliased <code>musicdb.SINGER</code> table reference
     */
    public Singer(Name alias) {
        this(alias, SINGER);
    }

    /**
     * Create a <code>musicdb.SINGER</code> table reference
     */
    public Singer() {
        this(DSL.name("SINGER"), null);
    }

    public <O extends Record> Singer(Table<O> child, ForeignKey<O, SingerRecord> key) {
        super(child, key, SINGER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Musicdb.MUSICDB;
    }

    @Override
    public Identity<SingerRecord, Integer> getIdentity() {
        return (Identity<SingerRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SingerRecord> getPrimaryKey() {
        return Keys.KEY_SINGER_PRIMARY;
    }

    @Override
    public List<UniqueKey<SingerRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_SINGER_FIRST_NAME);
    }

    @Override
    public Singer as(String alias) {
        return new Singer(DSL.name(alias), this);
    }

    @Override
    public Singer as(Name alias) {
        return new Singer(alias, this);
    }

    @Override
    public Singer as(Table<?> alias) {
        return new Singer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Singer rename(String name) {
        return new Singer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Singer rename(Name name) {
        return new Singer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Singer rename(Table<?> name) {
        return new Singer(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, String, LocalDate, byte[]> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Integer, ? super String, ? super String, ? super LocalDate, ? super byte[], ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Integer, ? super String, ? super String, ? super LocalDate, ? super byte[], ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
